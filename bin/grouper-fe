#!/usr/bin/env python

import argparse
from expvar.stats import stats
import logging
import os
import sys
from threading import Thread
from time import sleep
import tornado.ioloop
import tornado.httpserver
from grouper.app import Application
from grouper.graph import Graph
from grouper.models import get_db_engine, Session, load_plugins
from grouper.util import get_loglevel, get_database_url

import grouper.fe
from grouper.fe.routes import HANDLERS
from grouper.fe.util import get_template_env
from grouper.fe.settings import settings
from grouper.settings import default_settings_path

from sqlalchemy.exc import OperationalError

try:
    from raven.contrib.tornado import AsyncSentryClient
    raven_installed = True
except ImportError:
    raven_installed = False

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


class DbRefreshThread(Thread):
    def __init__(self, graph, refresh_interval, *args, **kwargs):
        self.graph = graph
        self.refresh_interval = refresh_interval
        Thread.__init__(self, *args, **kwargs)

    def run(self):

        while True:
            sleep(self.refresh_interval)

            logging.debug("Updating Graph from Database.")
            try:
                session = Session()
                self.graph.update_from_db(session)
                session.close()
                stats.set_gauge("successful-db-update", 1)
            except OperationalError:
                Session.configure(bind=get_db_engine(get_database_url(settings)))
                logging.critical("Failed to connect to database.")
                stats.set_gauge("successful-db-update", 0)


def main(argv):

    parser = argparse.ArgumentParser(description="Grouper Web Server.")
    parser.add_argument("-c", "--config", default=default_settings_path(),
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0,
                        help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % grouper.__version__,
                        help="Display version information.")
    parser.add_argument("-p", "--port", type=int, default=None,
                        help="Override port in config.")
    parser.add_argument("-n", "--deployment-name", type=str, default="",
                        help="Name of the deployment.")

    args = parser.parse_args()
    settings.start_config_thread(args.config, "fe")

    if settings.debug and settings.num_processes > 1:
        logging.fatal("Debug mode does not support multiple processes.")
        sys.exit(1)

    if settings.plugin_dir:
        if not os.path.exists(settings.plugin_dir):
            logging.fatal("Plugin directory does not exist")
            sys.exit(1)
        load_plugins(settings.plugin_dir, service_name="grouper-fe")

    log_level = get_loglevel(args)
    logging.basicConfig(
        level=log_level,
        format=settings.log_format,
    )

    if log_level < 0:
        sa_log.setLevel(logging.INFO)

    tornado_settings = {
        "static_path": os.path.join(os.path.dirname(grouper.fe.__file__), "static"),
        "debug": settings.debug,
        "xsrf_cookies": True,
    }

    template_env = get_template_env(deployment_name=args.deployment_name)

    Session.configure(bind=get_db_engine(get_database_url(settings)))

    logging.info("Initilializing graph data.")
    session = Session()
    graph = Graph()
    graph.update_from_db(session)
    session.close()

    my_settings = {
        "db_session": Session,
        "template_env": template_env,
    }


    if settings.sentry_dsn:
        logging.info("sentry DSN set")
        if not raven_installed:
            logging.warning("raven not installed, not enabling sentry")
        else:
            logging.info("enabling sentry")
            application.sentry_client = AsyncSentryClient(settings.sentry_dsn)

    refresher = DbRefreshThread(graph, settings.refresh_interval)
    refresher.daemon = True
    refresher.start()

    port = args.port or settings.port

    logging.info(
        "Starting application server with %d processes on port %d",
        settings.num_processes, port
    )
    server = tornado.httpserver.HTTPServer(application)
    server.bind(port)
    server.start(settings.num_processes)
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        tornado.ioloop.IOLoop.instance().stop()
    finally:
        print "Bye"


if __name__ == "__main__":
    main(sys.argv)
